{"version":3,"file":"component---src-templates-docs-js-8cb6642527b3a10ecb4c.js","mappings":"kMAOe,SAASA,EAAT,GAEX,IADDC,EACA,EADAA,KAEQC,EAA4CD,EAA5CC,eAAgBC,EAA4BF,EAA5BE,KAAMC,EAAsBH,EAAtBG,kBACtBC,EAAsBH,EAAtBG,YAAaC,EAASJ,EAATI,KACfC,GAAUC,EAAAA,EAAAA,QAAO,MAIvB,OAHAC,EAAAA,EAAAA,GAAeF,GCXW,SAACA,IAC3BG,EAAAA,EAAAA,YAAU,WACP,IAAMC,EAAa,+BAChBC,EAAU,CACP,4BACA,aACA,sBACA,qBAEHC,EAAO,cAGVN,EAAQO,QACJC,iBAAiB,oCACjBC,SAAQ,SAACC,GACP,IAAMC,EAAMD,EAAQE,cAAc,OAClC,GAAID,GAAOA,EAAIE,aAAoC,IAArBC,OAAOC,YAAoB,CAAC,IAAD,EAChDC,EAASC,SAASC,cAAc,UACtCF,EAAOG,aAAa,OAAQ,UAC5BH,EAAOG,aAAa,gBAAiB,UACrC,EAAAH,EAAOI,WAAUC,IAAjB,QAAwBhB,GACxBW,EAAOM,YAAchB,EACrBI,EAAQU,UAAUC,IAAIjB,GACtBM,EAAQa,YAAYP,GACpBA,EAAOQ,iBAAiB,SAAS,SAACC,GAC/B,IAAMC,EACwC,SAA3CD,EAAEE,OAAOC,aAAa,iBACrBF,GACDhB,EAAQU,UAAUC,IAAIjB,GACtByB,YAAW,WACRnB,EAAQoB,eAAe,CACpBC,SAAU,OACVC,MAAO,aAEV,GACHhB,EAAOM,YAAchB,IAErBI,EAAQU,UAAUa,OAAO7B,GACzBY,EAAOM,YA5BZ,eA8BEG,EAAEE,OAAOR,aAAa,iBAAkBO,YAIpD,CAAC1B,IDhCJkC,CAAclC,GAGX,gBAACmC,EAAA,EAAD,CACGC,MAAOtC,EAAYsC,MACnBC,aAAczC,EAAK0C,aAAaD,aAChCE,UAAW1C,EAAkB2C,MAC7BC,eAAgB7C,EAAK0C,aAAaG,gBAElC,uBACGC,UAAU,YACVC,IAAK3C,EACL4C,wBAAyB,CAAEC,OAAQ9C","sources":["webpack://envision-docs/./src/templates/docs.js","webpack://envision-docs/./src/hooks/expandCode.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport { useCopyExample } from '../hooks/copyExample';\nimport { useExpandCode } from '../hooks/expandCode';\nimport BaseTemplate from './BaseTemplate';\n\nexport default function Template({\n   data, // this prop will be injected by the GraphQL query below.\n}) {\n   const { markdownRemark, site, allMarkdownRemark } = data;\n   const { frontmatter, html } = markdownRemark;\n   const content = useRef(null);\n   useCopyExample(content);\n   useExpandCode(content);\n\n   return (\n      <BaseTemplate\n         title={frontmatter.title}\n         topMenuItems={site.siteMetadata.topMenuItems}\n         menuItems={allMarkdownRemark.edges}\n         menuCategories={site.siteMetadata.menuCategories}\n      >\n         <div\n            className=\"main-body\"\n            ref={content}\n            dangerouslySetInnerHTML={{ __html: html }}\n         />\n      </BaseTemplate>\n   );\n}\n\nexport const pageQuery = graphql`\n   query ($slug: String!) {\n      site {\n         siteMetadata {\n            topMenuItems {\n               label\n               to\n            }\n            menuCategories {\n               title\n               slug\n            }\n         }\n      }\n      markdownRemark(fields: { slug: { eq: $slug } }) {\n         html\n         frontmatter {\n            title\n         }\n      }\n      allMarkdownRemark {\n         edges {\n            node {\n               id\n               frontmatter {\n                  title\n               }\n               fields {\n                  slug\n               }\n            }\n         }\n      }\n   }\n`;\n\nTemplate.propTypes = {\n   data: PropTypes.object,\n};\n","import { useEffect } from 'react';\n\nexport const useExpandCode = (content) => {\n   useEffect(() => {\n      const EXPANDABLE = 'gatsby-highlight--expandable',\n         TOGGLER = [\n            'gatsby-highlight__toggler',\n            'env-button',\n            'env-button--primary',\n            'env-button--small',\n         ],\n         MORE = '+ Show more',\n         LESS = '- Show less';\n\n      content.current\n         .querySelectorAll('.gatsby-highlight[data-language]')\n         .forEach((element) => {\n            const pre = element.querySelector('pre');\n            if (pre && pre.clientHeight > window.innerHeight * 0.25) {\n               const button = document.createElement('button');\n               button.setAttribute('type', 'button');\n               button.setAttribute('aria-expanded', 'false');\n               button.classList.add(...TOGGLER);\n               button.textContent = MORE;\n               element.classList.add(EXPANDABLE);\n               element.appendChild(button);\n               button.addEventListener('click', (e) => {\n                  const expanded =\n                     e.target.getAttribute('aria-expanded') === 'true';\n                  if (expanded) {\n                     element.classList.add(EXPANDABLE);\n                     setTimeout(() => {\n                        element.scrollIntoView({\n                           behavior: 'auto',\n                           block: 'center',\n                        });\n                     }, 1);\n                     button.textContent = MORE;\n                  } else {\n                     element.classList.remove(EXPANDABLE);\n                     button.textContent = LESS;\n                  }\n                  e.target.setAttribute('aria-expanded', !expanded);\n               });\n            }\n         });\n   }, [content]);\n};\n"],"names":["Template","data","markdownRemark","site","allMarkdownRemark","frontmatter","html","content","useRef","useCopyExample","useEffect","EXPANDABLE","TOGGLER","MORE","current","querySelectorAll","forEach","element","pre","querySelector","clientHeight","window","innerHeight","button","document","createElement","setAttribute","classList","add","textContent","appendChild","addEventListener","e","expanded","target","getAttribute","setTimeout","scrollIntoView","behavior","block","remove","useExpandCode","BaseTemplate","title","topMenuItems","siteMetadata","menuItems","edges","menuCategories","className","ref","dangerouslySetInnerHTML","__html"],"sourceRoot":""}