{"version":3,"file":"component---src-templates-docs-js-2549f7326bfc93e943d2.js","mappings":"wLAAA,MAAMA,EAAsB,CACzBC,SAAU,EAAI,EACdC,UAAW,EAAI,IACfC,UAAW,EAAI,IACfC,WAAY,EAAI,GAGNC,EAAmB,CAC7B,MACA,OACA,SACA,cACA,SACA,OACA,aACA,OACA,OACA,QACA,cACA,OACA,SACA,SACA,QACA,QAEUC,EAA2B,CAAC,KAAM,KAAM,KAAM,MAE9CC,EAAaA,CAACC,EAAOC,IAExB,EAAID,GADXC,EAAQA,GAAST,EAAoBE,WAIlCQ,EAAYC,IAGfA,EAAMA,EAAIC,QAFa,oCAEW,SAAUC,EAAGC,EAAGC,EAAGC,GAClD,OAAOF,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,CAC9B,IACA,MAAMC,EAJW,4CAIOC,KAAKP,GACvBG,EAAIK,SAASF,EAAO,GAAI,IACxBF,EAAII,SAASF,EAAO,GAAI,IACxBD,EAAIG,SAASF,EAAO,GAAI,IAC9B,OAAOA,EAAS,CAACH,EAAGC,EAAGC,GAAK,IAAI,EAG7BI,EAAaC,IAChB,MAAMC,EAAID,EAAIE,KAAI,SAAUC,GAEzB,OADAA,GAAK,MACO,OAAUA,EAAI,MAAQC,KAAKC,KAAKF,EAAI,MAAS,MAAO,IACnE,IACA,MAAc,MAAPF,EAAE,GAAqB,MAAPA,EAAE,GAAqB,MAAPA,EAAE,EAAW,EAG1CK,EAAmBA,CAACC,EAAMC,KACpC,MAAMC,EAAOV,EAAUV,EAASkB,IAC1BG,EAAOX,EAAUV,EAASmB,IAChC,OAAQJ,KAAKO,IAAIF,EAAMC,GAAQ,MAASN,KAAKQ,IAAIH,EAAMC,GAAQ,IAAK,ECnC1DG,EAAuBC,IACjCC,EAAAA,WAAgB,KACb,MAAMC,EAAYC,SAASC,eAAe,wBAC1C,GAAIF,EAAW,CACZ,MAAMG,EAAgBC,iBAAiBH,SAASI,MAC1CC,EAAcH,EAAcI,iBAAiB,iCAG7CC,EAAaL,EAAcI,iBAAiB,+BAG5CE,EAAaN,EAAcI,iBAAiB,+BAIlDvC,EAAiB0C,SAASC,IACvB,MAAMC,EAASX,SAASY,cAAc,OACtCD,EAAOE,UAAS,uCACbH,EAAUpC,QAAQ,IAAK,KCrC/BwC,cACAC,MAAM,KACN9B,KAAI,SAAU+B,GACZ,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,EACpD,IACCC,KAAK,KDiCC,SAED,MAAMC,EAASrB,SAASY,cAAc,MACtCS,EAAOC,UAAUC,IAAI,gCAErBvD,EAAyByC,SAASe,IAC/B,IAAIC,EAAe,QACfC,EAAcF,EAClB,MAAMG,EAAiBjB,EAAS,IAAIc,EAC9BI,EAAU1B,EAAcI,iBAAiB,yBACnBI,EAAS,IAAIc,GAGzC,GAAII,EAAS,CACV,MAAMC,EAAexC,EAAiBuC,EAASvB,GACzCyB,EAAkBzC,EAAiBuC,EAASpB,GAC5CuB,EAAkB9D,EAAW6D,GAC7BE,EAAiB/D,EAAW4D,GACT5D,EACtBoB,EAAiBkB,EAAYqB,MAG7BH,EAAe,SAEdM,IACDL,GAvDlB,+GAwDsBM,IACDN,GAAe,KAGxB,CAEAL,EAAOR,WA3DJoB,KACf,MAAMC,EAAIC,OAAOC,OAAO,CAAC,EAAGH,GAC5B,MAAM,qCAAsCC,EAAEP,YAAW,4BAA4BO,EAAET,aAAY,6BAC9ES,EAAEG,KAAI,6BACXH,EAAE7D,IAAG,mCAuDWiE,CAAS,CAC1BX,YAAaA,EACbF,aAAcA,EACdY,KAAMX,EACNrD,IAAKuD,GACN,IAELjB,EAAO4B,YAAYlB,GACnBtB,EAAUwC,YAAY5B,EAAO,GAEnC,IACA,CAACd,GAAS,E,cE3ED,SAAS2C,EAAQC,GAE5B,IAF6B,KAC9BC,GACFD,EACE,MAAM,eAAEE,EAAc,KAAEC,EAAI,kBAAEC,GAAsBH,GAC9C,YAAEI,EAAW,KAAEC,GAASJ,EACxB9C,GAAUmD,EAAAA,EAAAA,QAAO,MAKvB,OAJAC,EAAAA,EAAAA,GAAepD,GCZYA,MAC3BqD,EAAAA,EAAAA,YAAU,KACP,MAAMC,EAAa,+BAChBC,EAAU,CACP,4BACA,aACA,sBACA,qBAEHC,EAAO,cAGVxD,EAAQyD,QACJC,iBAAiB,oCACjB9C,SAAS+C,IACP,GACGA,EAAQC,QAAQC,SAASC,SAAS,eAClCH,EAAQC,QAAQC,SAASC,SAAS,aAElC,OAEH,MAAMC,EAAMJ,EAAQK,cAAc,OAClC,GAAID,GAAOA,EAAIE,aAAoC,IAArBC,OAAOC,YAAoB,CAAC,IAADC,EACtD,MAAMC,EAASlE,SAASY,cAAc,UACtCsD,EAAOC,aAAa,OAAQ,UAC5BD,EAAOC,aAAa,gBAAiB,UACrCF,EAAAC,EAAO5C,WAAUC,IAAG6C,MAAAH,EAAIb,GACxBc,EAAOG,YAAchB,EACrBG,EAAQlC,UAAUC,IAAI4B,GACtBK,EAAQjB,YAAY2B,GACpBA,EAAOI,iBAAiB,SAAUC,IAC/B,MAAMC,EACwC,SAA3CD,EAAEE,OAAOC,aAAa,iBACrBF,GACDhB,EAAQlC,UAAUC,IAAI4B,GACtBwB,YAAW,KACRnB,EAAQoB,eAAe,CACpBC,SAAU,OACVC,MAAO,UACR,GACF,GACHZ,EAAOG,YAAchB,IAErBG,EAAQlC,UAAUyD,OAAO5B,GACzBe,EAAOG,YAlCZ,eAoCEE,EAAEE,OAAON,aAAa,iBAAkBK,EAAS,GAEvD,IACD,GACL,CAAC3E,GAAS,EDrCbmF,CAAcnF,GACdD,EAAoBC,GAGjBC,EAAAA,cAACmF,EAAAA,EAAY,CACVC,MAAOpC,EAAYoC,MACnBC,WAAYrC,EAAYqC,WACxBC,MAAOtC,EAAYsC,MACnBC,KAAMvC,EAAYuC,KAClBC,UAAWxC,EAAYwC,UACvBC,SAAUzC,EAAYyC,SACtBC,aAAc5C,EAAK6C,aAAaD,aAChCE,UAAW7C,EAAkB8C,MAC7BC,eAAgBhD,EAAK6C,aAAaG,gBAElC9F,EAAAA,cAAA,OACG+F,UAAU,YACVC,IAAKjG,EACLkG,wBAAyB,CAAEC,OAAQjD,KAI/C,C","sources":["webpack://envision-docs/./src/hooks/colorUtils.js","webpack://envision-docs/./src/hooks/dashboardExample.js","webpack://envision-docs/./src/hooks/demoUtils.js","webpack://envision-docs/./src/templates/docs.js","webpack://envision-docs/./src/hooks/expandCode.js"],"sourcesContent":["const WCAG_CONTRAST_RATIO = {\n   AA_LARGE: 1 / 3,\n   AA_NORMAL: 1 / 4.5,\n   AAA_LARGE: 1 / 4.5,\n   AAA_NORMAL: 1 / 7,\n};\n\nexport const DASHBOARD_COLORS = [\n   'red',\n   'pink',\n   'purple',\n   'deep-purple',\n   'indigo',\n   'blue',\n   'light-blue',\n   'cyan',\n   'teal',\n   'green',\n   'light-green',\n   'lime',\n   'yellow',\n   'orange',\n   'brown',\n   'gray',\n];\nexport const DASHBOARD_COLOR_VARIANTS = ['05', '20', '50', '90'];\n\nexport const passesWCAG = (ratio, level) => {\n   level = level || WCAG_CONTRAST_RATIO.AA_NORMAL;\n   return 1 / ratio < level;\n};\n\nconst hexToRgb = (hex) => {\n   const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n   const rgbRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n   hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n   });\n   const result = rgbRegex.exec(hex);\n   const r = parseInt(result[1], 16);\n   const g = parseInt(result[2], 16);\n   const b = parseInt(result[3], 16);\n   return result ? [r, g, b] : null;\n};\n\nconst luminance = (rgb) => {\n   const a = rgb.map(function (v) {\n      v /= 255;\n      return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n   });\n   return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n};\n\nexport const getContrastRatio = (hex1, hex2) => {\n   const lum1 = luminance(hexToRgb(hex1));\n   const lum2 = luminance(hexToRgb(hex2));\n   return (Math.max(lum1, lum2) + 0.05) / (Math.min(lum1, lum2) + 0.05);\n};\n","import * as React from 'react';\nimport {\n   DASHBOARD_COLOR_VARIANTS,\n   DASHBOARD_COLORS,\n   getContrastRatio,\n   passesWCAG,\n} from './colorUtils';\nimport { toTitleCase } from './demoUtils';\n\nconst TEXT_CONTRAST_ICON =\n   '<svg class=\"env-icon example-dashboard-color-list-icon\">' +\n   '<use href=\"/images/docs-icons.svg#text\"></use></svg>';\n\nconst listItem = (options) => {\n   const o = Object.assign({}, options);\n   return `<li class=\"env-dashboard-color-bg-${o.bgClassName} env-dashboard-color-txt-${o.txtClassName}\">\n           <div><span>${o.name}</span>\n           <span>${o.hex}</span>\n           </div></li>`;\n};\n\nexport const useDashboardExample = (content) => {\n   React.useEffect(() => {\n      const colorList = document.getElementById('dashboard-color-list');\n      if (colorList) {\n         const compStyleBody = getComputedStyle(document.body);\n         const bodyBgColor = compStyleBody.getPropertyValue(\n            `--env-dashboard-color-gray-05`\n         );\n         const blackColor = compStyleBody.getPropertyValue(\n            `--env-dashboard-color-black`\n         );\n         const whiteColor = compStyleBody.getPropertyValue(\n            `--env-dashboard-color-white`\n         );\n\n         DASHBOARD_COLORS.forEach((colorName) => {\n            const gridEl = document.createElement('div');\n            gridEl.innerHTML = `<h2 class=\"env-ui-text-subheading\">${toTitleCase(\n               colorName.replace('-', ' ')\n            )}</h2>`;\n\n            const listEl = document.createElement('ul');\n            listEl.classList.add('example-dashboard-color-list');\n\n            DASHBOARD_COLOR_VARIANTS.forEach((variantName) => {\n               let txtClassName = 'black';\n               let variantText = variantName;\n               const bgClassName = `${colorName}-${variantName}`;\n               const bgColor = compStyleBody.getPropertyValue(\n                  `--env-dashboard-color-${colorName}-${variantName}`\n               );\n\n               if (bgColor) {\n                  const contrastBody = getContrastRatio(bgColor, bodyBgColor);\n                  const contrastSection = getContrastRatio(bgColor, whiteColor);\n                  const passesAAonWhite = passesWCAG(contrastSection);\n                  const passesAAonBody = passesWCAG(contrastBody);\n                  const canHaveBlackText = passesWCAG(\n                     getContrastRatio(blackColor, bgColor)\n                  );\n                  if (!canHaveBlackText) {\n                     txtClassName = 'white';\n                  }\n                  if (passesAAonWhite) {\n                     variantText += TEXT_CONTRAST_ICON;\n                     if (passesAAonBody) {\n                        variantText += '*';\n                     }\n                  }\n               }\n\n               listEl.innerHTML += listItem({\n                  bgClassName: bgClassName,\n                  txtClassName: txtClassName,\n                  name: variantText,\n                  hex: bgColor,\n               });\n            });\n            gridEl.appendChild(listEl);\n            colorList.appendChild(gridEl);\n         });\n      }\n   }, [content]);\n};\n","export const toTitleCase = (str) => {\n   return str\n      .toLowerCase()\n      .split(' ')\n      .map(function (word) {\n         return word.charAt(0).toUpperCase() + word.slice(1);\n      })\n      .join(' ');\n};\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport { useCopyExample } from '../hooks/copyExample';\nimport { useDashboardExample } from '../hooks/dashboardExample';\nimport { useExpandCode } from '../hooks/expandCode';\nimport BaseTemplate from './BaseTemplate';\n\nexport default function Template({\n   data, // this prop will be injected by the GraphQL query below.\n}) {\n   const { markdownRemark, site, allMarkdownRemark } = data;\n   const { frontmatter, html } = markdownRemark;\n   const content = useRef(null);\n   useCopyExample(content);\n   useExpandCode(content);\n   useDashboardExample(content);\n\n   return (\n      <BaseTemplate\n         title={frontmatter.title}\n         deprecated={frontmatter.deprecated}\n         since={frontmatter.since}\n         beta={frontmatter.beta}\n         dashboard={frontmatter.dashboard}\n         indexing={frontmatter.indexing}\n         topMenuItems={site.siteMetadata.topMenuItems}\n         menuItems={allMarkdownRemark.edges}\n         menuCategories={site.siteMetadata.menuCategories}\n      >\n         <div\n            className=\"main-body\"\n            ref={content}\n            dangerouslySetInnerHTML={{ __html: html }}\n         />\n      </BaseTemplate>\n   );\n}\n\nexport const pageQuery = graphql`\n   query ($slug: String!) {\n      site {\n         siteMetadata {\n            topMenuItems {\n               label\n               to\n            }\n            menuCategories {\n               title\n               slug\n            }\n         }\n      }\n      markdownRemark(fields: { slug: { eq: $slug } }) {\n         html\n         frontmatter {\n            title\n            deprecated\n            since\n            beta\n            dashboard\n            indexing\n         }\n      }\n      allMarkdownRemark {\n         edges {\n            node {\n               id\n               frontmatter {\n                  title\n                  deprecated\n                  since\n                  beta\n                  dashboard\n                  indexing\n               }\n               fields {\n                  slug\n               }\n            }\n         }\n      }\n   }\n`;\n\nTemplate.propTypes = {\n   data: PropTypes.object,\n};\n","import { useEffect } from 'react';\n\nexport const useExpandCode = (content) => {\n   useEffect(() => {\n      const EXPANDABLE = 'gatsby-highlight--expandable',\n         TOGGLER = [\n            'gatsby-highlight__toggler',\n            'env-button',\n            'env-button--primary',\n            'env-button--small',\n         ],\n         MORE = '+ Show more',\n         LESS = '- Show less';\n\n      content.current\n         .querySelectorAll('.gatsby-highlight[data-language]')\n         .forEach((element) => {\n            if (\n               element.dataset.language.includes('no-example') ||\n               element.dataset.language.includes('no-expand')\n            ) {\n               return;\n            }\n            const pre = element.querySelector('pre');\n            if (pre && pre.clientHeight > window.innerHeight * 0.25) {\n               const button = document.createElement('button');\n               button.setAttribute('type', 'button');\n               button.setAttribute('aria-expanded', 'false');\n               button.classList.add(...TOGGLER);\n               button.textContent = MORE;\n               element.classList.add(EXPANDABLE);\n               element.appendChild(button);\n               button.addEventListener('click', (e) => {\n                  const expanded =\n                     e.target.getAttribute('aria-expanded') === 'true';\n                  if (expanded) {\n                     element.classList.add(EXPANDABLE);\n                     setTimeout(() => {\n                        element.scrollIntoView({\n                           behavior: 'auto',\n                           block: 'center',\n                        });\n                     }, 1);\n                     button.textContent = MORE;\n                  } else {\n                     element.classList.remove(EXPANDABLE);\n                     button.textContent = LESS;\n                  }\n                  e.target.setAttribute('aria-expanded', !expanded);\n               });\n            }\n         });\n   }, [content]);\n};\n"],"names":["WCAG_CONTRAST_RATIO","AA_LARGE","AA_NORMAL","AAA_LARGE","AAA_NORMAL","DASHBOARD_COLORS","DASHBOARD_COLOR_VARIANTS","passesWCAG","ratio","level","hexToRgb","hex","replace","m","r","g","b","result","exec","parseInt","luminance","rgb","a","map","v","Math","pow","getContrastRatio","hex1","hex2","lum1","lum2","max","min","useDashboardExample","content","React","colorList","document","getElementById","compStyleBody","getComputedStyle","body","bodyBgColor","getPropertyValue","blackColor","whiteColor","forEach","colorName","gridEl","createElement","innerHTML","toLowerCase","split","word","charAt","toUpperCase","slice","join","listEl","classList","add","variantName","txtClassName","variantText","bgClassName","bgColor","contrastBody","contrastSection","passesAAonWhite","passesAAonBody","options","o","Object","assign","name","listItem","appendChild","Template","_ref","data","markdownRemark","site","allMarkdownRemark","frontmatter","html","useRef","useCopyExample","useEffect","EXPANDABLE","TOGGLER","MORE","current","querySelectorAll","element","dataset","language","includes","pre","querySelector","clientHeight","window","innerHeight","_button$classList","button","setAttribute","apply","textContent","addEventListener","e","expanded","target","getAttribute","setTimeout","scrollIntoView","behavior","block","remove","useExpandCode","BaseTemplate","title","deprecated","since","beta","dashboard","indexing","topMenuItems","siteMetadata","menuItems","edges","menuCategories","className","ref","dangerouslySetInnerHTML","__html"],"sourceRoot":""}